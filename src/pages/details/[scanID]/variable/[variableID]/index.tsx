import { useRouter } from 'next/router';
import Head from 'next/head';
import Link from 'next/link';
import { StockMarketDetailContext, VariableItem, ScanItem, ScanCriteriaItem, ValueVariable, IndicatorVariable } from '@/layout/main-layout';

import styles from '@/styles/common.module.css';
import { useEffect, useState } from 'react';

type propsVariableItem = {
    scanId: ScanItem['id'];
    variableID: string;
    variable: VariableItem;
};
function VariableItem({ scanId, variableID, variable }: propsVariableItem) {
    const [period, setPeriod] = useState(0);

    useEffect(() => {
        if (variable.type == 'indicator') {
            setPeriod((variable as IndicatorVariable).default_value);
        }
    }, []);

    if (variable.type == 'value') {
        return (
            <ul role="list" className="divide-y divide-gray-200">
                {(variable as ValueVariable).values.map((val) => (
                    <li key={`${scanId}-${variableID}-${val}`} className="flex py-4">
                        <p className="font-medium text-gray-900">{val}</p>
                    </li>
                ))}
            </ul>
        );
    } else if (variable.type == 'indicator') {
        return (
            <ul role="list" className="divide-y divide-gray-200">
                <div>
                    <h3 className="text-lg font-medium leading-6 my-4 text-gray-900 uppercase">{(variable as IndicatorVariable).study_type}</h3>
                    <div>
                        <label htmlFor="number" className="block text-sm font-medium text-gray-700">period</label>
                        <div className="mt-1.5">
                            <input 
                                data-testid="indicator-input" 
                                type="tel" 
                                name="param_value" 
                                id="param_value" 
                                max={(variable as IndicatorVariable).max_value}
                                min={(variable as IndicatorVariable).min_value}
                                className="block w-full rounded-md border-[0.1px] border-gray-300 shadow-md focus:border-indigo-500 focus:ring-indigo-500 sm:text-sm px-2 py-3" 
                                placeholder="period value" 
                                value={period}
                                onChange={(e) => {
                                    const v = parseInt(e.target.value);
                                    setPeriod(v||0)
                                }}
                            />
                        </div>
                    </div>
                </div>
            </ul>
        );
    }
    return (<></>);
}

export default function ScanCriteriaVariable() {
    const router = useRouter()
    const { scanID, variableID } = router.query;
    console.log("queryIds", scanID, variableID);

    return (
        <>
            <Head>
                <title>Create Next App</title>
                <meta name="description" content="Generated by create next app" />
                <meta name="viewport" content="width=device-width, initial-scale=1" />
                <link rel="icon" href="/favicon.ico" />
            </Head>
            <main className="w-screen h-screen flex items-center justify-between border-t border-gray-200 bg-gray-100  px-4 py-3 sm:px-6" >
                <div className='flex flex-col overflow-hidden mx-auto max-w-lg md:min-w-[30vw]' >
                    <button className="inline-flex gap-2 items-center my-3" onClick={() => { router.push(`/details/${scanID}`); }} >
                        <svg xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" strokeWidth="1.5" stroke="currentColor" className="w-5 h-5">
                            <path strokeLinecap="round" strokeLinejoin="round" d="M10.5 19.5L3 12m0 0l7.5-7.5M3 12h18"></path>
                        </svg>
                        Go back
                    </button>
                    <StockMarketDetailContext.Consumer>
                        {(details) => {
                            const scan = typeof scanID == 'string' ? details.find((item) => (item.id == parseInt(scanID))) : undefined;
                            if (!scan) {
                                return (<h3 className="text-2xl font-medium leading-6 text-gray-900">Scan not found.</h3>);
                            }
                            console.log("ScanCriteriaVariable", scan.criteria);
                            let variable = null;
                            scan.criteria.forEach((criteria) => {
                                if (criteria.variable && typeof variableID == 'string' && variableID in criteria.variable) {
                                    variable = criteria.variable[variableID];
                                }
                            });
                            if (!variable) {
                                return (<h3 className="text-2xl font-medium leading-6 text-gray-900">variable not found in Scan.</h3>);
                            }
                            return (
                                <div className='overflow-hidden bg-white shadow sm:rounded-md mx-auto max-w-lg md:min-w-[30vw] px-4 py-5 sm:px-4' >
                                    {variable && (
                                        <>
                                            <h3 className="text-2xl font-medium leading-6 text-gray-900">
                                                Variable params
                                            </h3>
                                            <hr className="w-full border-[0.1px] border-gray-200 mt-5" />
                                            <VariableItem
                                                scanId={scan.id}
                                                variableID={variableID as string}
                                                variable={variable}
                                            />
                                        </>
                                    )}
                                </div>
                            );
                        }}
                    </StockMarketDetailContext.Consumer>
                </div>
            </main>
        </>
    )
}